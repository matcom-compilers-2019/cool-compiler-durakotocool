//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from COOLgrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using CmpProject;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class COOLgrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POINT_COMMA=1, COMA=2, CORCHETE_AB=3, CORCHETE_CE=4, LLAVE_AB=5, LLAVE_CE=6, 
		POINT=7, PARENT_AB=8, PARENT_CE=9, OP_EQUAL=10, OP_MINOR=11, OP_MINOR_EQUAL=12, 
		OP_PLUS=13, OP_MINUS=14, OP_MULT=15, OP_DIV=16, OP_NEG=17, OP_ASSIGN=18, 
		OP_TYPED=19, OP_CASE=20, OP_CLASS=21, IF=22, THEN=23, ELSE=24, FI=25, 
		WHILE=26, LOOP=27, POOL=28, LET=29, IN=30, CASE=31, OF=32, ESAC=33, TRUE=34, 
		FALSE=35, CLASS=36, INHERITS=37, ISVOID=38, NEW=39, NOT=40, INTEGER=41, 
		TYPE=42, ID=43, STRING=44, WS=45, COMMENTS=46;
	public const int
		RULE_program = 0, RULE_class = 1, RULE_feature = 2, RULE_formal = 3, RULE_expr = 4, 
		RULE_letRule = 5, RULE_params = 6, RULE_declaration = 7, RULE_branch = 8, 
		RULE_expr_list = 9;
	public static readonly string[] ruleNames = {
		"program", "class", "feature", "formal", "expr", "letRule", "params", 
		"declaration", "branch", "expr_list"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'['", "']'", "'{'", "'}'", "'.'", "'('", "')'", "'='", 
		"'<'", "'<='", "'+'", "'-'", "'*'", "'/'", "'~'", "'<-'", "':'", "'=>'", 
		"'@'", "'if'", "'then'", "'else'", "'fi'", "'while'", "'loop'", "'pool'", 
		"'let'", "'in'", "'case'", "'of'", "'esac'", "'true'", "'false'", "'class'", 
		"'inherits'", "'isvoid'", "'new'", "'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POINT_COMMA", "COMA", "CORCHETE_AB", "CORCHETE_CE", "LLAVE_AB", 
		"LLAVE_CE", "POINT", "PARENT_AB", "PARENT_CE", "OP_EQUAL", "OP_MINOR", 
		"OP_MINOR_EQUAL", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", "OP_NEG", 
		"OP_ASSIGN", "OP_TYPED", "OP_CASE", "OP_CLASS", "IF", "THEN", "ELSE", 
		"FI", "WHILE", "LOOP", "POOL", "LET", "IN", "CASE", "OF", "ESAC", "TRUE", 
		"FALSE", "CLASS", "INHERITS", "ISVOID", "NEW", "NOT", "INTEGER", "TYPE", 
		"ID", "STRING", "WS", "COMMENTS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "COOLgrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static COOLgrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public COOLgrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public COOLgrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ClassContext _class;
		public IList<ClassContext> _classes = new List<ClassContext>();
		public ITerminalNode Eof() { return GetToken(COOLgrammarParser.Eof, 0); }
		public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20; _localctx._class = @class();
				_localctx._classes.Add(_localctx._class);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			State = 25; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ClassContext father;
		public IToken type;
		public IToken inherits;
		public FeatureContext _feature;
		public IList<FeatureContext> _features = new List<FeatureContext>();
		public ITerminalNode[] TYPE() { return GetTokens(COOLgrammarParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(COOLgrammarParser.TYPE, i);
		}
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 2, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(CLASS);
			State = 28; _localctx.type = Match(TYPE);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 29; Match(INHERITS);
				State = 30; _localctx.inherits = Match(TYPE);
				}
			}

			State = 33; Match(LLAVE_AB);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 34; _localctx._feature = feature();
				_localctx._features.Add(_localctx._feature);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40; Match(LLAVE_CE);
			State = 41; Match(POINT_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public string idText;
		public string typeText;
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
	 
		public FeatureContext() { }
		public virtual void CopyFrom(FeatureContext context) {
			base.CopyFrom(context);
			this.idText = context.idText;
			this.typeText = context.typeText;
		}
	}
	public partial class MethodContext : FeatureContext {
		public IToken methodName;
		public FormalContext _formal;
		public IList<FormalContext> _formals = new List<FormalContext>();
		public IToken TypeReturn;
		public ExprContext exprBody;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public MethodContext(FeatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}
	public partial class AttributeContext : FeatureContext {
		public DeclarationContext decl;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AttributeContext(FeatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_feature);
		int _la;
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; ((MethodContext)_localctx).methodName = Match(ID);
				State = 44; Match(PARENT_AB);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 45; ((MethodContext)_localctx)._formal = formal();
					((MethodContext)_localctx)._formals.Add(((MethodContext)_localctx)._formal);
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 46; Match(COMA);
						State = 47; ((MethodContext)_localctx)._formal = formal();
						((MethodContext)_localctx)._formals.Add(((MethodContext)_localctx)._formal);
						}
						}
						State = 52;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 55; Match(PARENT_CE);
				State = 56; Match(OP_TYPED);
				State = 57; ((MethodContext)_localctx).TypeReturn = Match(TYPE);
				State = 58; Match(LLAVE_AB);
				State = 59; ((MethodContext)_localctx).exprBody = expr(0);
				State = 60; Match(LLAVE_CE);
				State = 61; Match(POINT_COMMA);
				 
								((MethodContext)_localctx).idText = (((MethodContext)_localctx).methodName).Text; 
								((MethodContext)_localctx).typeText = (((MethodContext)_localctx).TypeReturn).Text;
							
				}
				break;
			case 2:
				_localctx = new AttributeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; ((AttributeContext)_localctx).decl = declaration();
				State = 65; Match(POINT_COMMA);
				 
							  ((AttributeContext)_localctx).idText = ((AttributeContext)_localctx).decl.idText;
							  ((AttributeContext)_localctx).typeText = ((AttributeContext)_localctx).decl.typeText; 
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public string idText;
		public string typeText;
		public IToken id;
		public IToken type;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterFormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitFormal(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 6, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; _localctx.id = Match(ID);
			State = 71; Match(OP_TYPED);
			State = 72; _localctx.type = Match(TYPE);
			 _localctx.idText = (_localctx.id).Text; _localctx.typeText = (_localctx.type).Text;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public IType computedType;
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
			this.computedType = context.computedType;
		}
	}
	public partial class ArithContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OP_MULT() { return GetToken(COOLgrammarParser.OP_MULT, 0); }
		public ITerminalNode OP_DIV() { return GetToken(COOLgrammarParser.OP_DIV, 0); }
		public ITerminalNode OP_PLUS() { return GetToken(COOLgrammarParser.OP_PLUS, 0); }
		public ITerminalNode OP_MINUS() { return GetToken(COOLgrammarParser.OP_MINUS, 0); }
		public ArithContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterArith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitArith(this);
		}
	}
	public partial class DispatchContext : ExprContext {
		public ExprContext expresion;
		public IToken type;
		public IToken id;
		public ExprContext _expr;
		public IList<ExprContext> _expresions = new List<ExprContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public DispatchContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterDispatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitDispatch(this);
		}
	}
	public partial class IntegerExprContext : ExprContext {
		public IToken integer;
		public ITerminalNode INTEGER() { return GetToken(COOLgrammarParser.INTEGER, 0); }
		public IntegerExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterIntegerExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitIntegerExpr(this);
		}
	}
	public partial class InParenthesisExprContext : ExprContext {
		public ExprContext expresion;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InParenthesisExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterInParenthesisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitInParenthesisExpr(this);
		}
	}
	public partial class CondExprContext : ExprContext {
		public ExprContext ifExpr;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CondExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
	}
	public partial class LetExprContext : ExprContext {
		public LetRuleContext let;
		public LetRuleContext letRule() {
			return GetRuleContext<LetRuleContext>(0);
		}
		public LetExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
	}
	public partial class StringExprContext : ExprContext {
		public IToken @string;
		public ITerminalNode STRING() { return GetToken(COOLgrammarParser.STRING, 0); }
		public StringExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterStringExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitStringExpr(this);
		}
	}
	public partial class CompaExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OP_MINOR() { return GetToken(COOLgrammarParser.OP_MINOR, 0); }
		public ITerminalNode OP_MINOR_EQUAL() { return GetToken(COOLgrammarParser.OP_MINOR_EQUAL, 0); }
		public ITerminalNode OP_EQUAL() { return GetToken(COOLgrammarParser.OP_EQUAL, 0); }
		public CompaExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterCompaExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitCompaExpr(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ExprContext expresion;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
	}
	public partial class WhileExprContext : ExprContext {
		public ExprContext whileExpr;
		public ExprContext loopExpr;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WhileExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterWhileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitWhileExpr(this);
		}
	}
	public partial class NegExprContext : ExprContext {
		public ExprContext expresion;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterNegExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitNegExpr(this);
		}
	}
	public partial class IsvoidExprContext : ExprContext {
		public ExprContext expresion;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsvoidExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterIsvoidExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitIsvoidExpr(this);
		}
	}
	public partial class BlockExprContext : ExprContext {
		public ExprContext _expr;
		public IList<ExprContext> _expresions = new List<ExprContext>();
		public ExprContext finalExpresion;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BlockExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterBlockExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitBlockExpr(this);
		}
	}
	public partial class CaseExprContext : ExprContext {
		public ExprContext expresion;
		public BranchContext firstBranch;
		public BranchContext _branch;
		public IList<BranchContext> _branches = new List<BranchContext>();
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BranchContext[] branch() {
			return GetRuleContexts<BranchContext>();
		}
		public BranchContext branch(int i) {
			return GetRuleContext<BranchContext>(i);
		}
		public CaseExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterCaseExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitCaseExpr(this);
		}
	}
	public partial class BoolExprContext : ExprContext {
		public IToken @bool;
		public ITerminalNode TRUE() { return GetToken(COOLgrammarParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(COOLgrammarParser.FALSE, 0); }
		public BoolExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}
	public partial class SelfDispatchContext : ExprContext {
		public IToken id;
		public ExprContext _expr;
		public IList<ExprContext> _expresions = new List<ExprContext>();
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SelfDispatchContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterSelfDispatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitSelfDispatch(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken id;
		public ExprContext expresion;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
	}
	public partial class NewTypeExprContext : ExprContext {
		public IToken type;
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public NewTypeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterNewTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitNewTypeExpr(this);
		}
	}
	public partial class IdExprContext : ExprContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public IdExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 76; Match(IF);
				State = 77; ((CondExprContext)_localctx).ifExpr = expr(0);
				State = 78; Match(THEN);
				State = 79; ((CondExprContext)_localctx).thenExpr = expr(0);
				State = 80; Match(ELSE);
				State = 81; ((CondExprContext)_localctx).elseExpr = expr(0);
				State = 82; Match(FI);
				}
				break;
			case 2:
				{
				_localctx = new WhileExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; Match(WHILE);
				State = 85; ((WhileExprContext)_localctx).whileExpr = expr(0);
				State = 86; Match(LOOP);
				State = 87; ((WhileExprContext)_localctx).loopExpr = expr(0);
				State = 88; Match(POOL);
				}
				break;
			case 3:
				{
				_localctx = new BlockExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(LLAVE_AB);
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 91; ((BlockExprContext)_localctx)._expr = expr(0);
						((BlockExprContext)_localctx)._expresions.Add(((BlockExprContext)_localctx)._expr);
						State = 92; Match(POINT_COMMA);
						}
						} 
					}
					State = 98;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 99; ((BlockExprContext)_localctx).finalExpresion = expr(0);
				State = 100; Match(POINT_COMMA);
				State = 101; Match(LLAVE_CE);
				}
				break;
			case 4:
				{
				_localctx = new LetExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; Match(LET);
				State = 104; ((LetExprContext)_localctx).let = letRule();
				}
				break;
			case 5:
				{
				_localctx = new CaseExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105; Match(CASE);
				State = 106; ((CaseExprContext)_localctx).expresion = expr(0);
				State = 107; Match(OF);
				State = 108; ((CaseExprContext)_localctx).firstBranch = branch();
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 109; ((CaseExprContext)_localctx)._branch = branch();
					((CaseExprContext)_localctx)._branches.Add(((CaseExprContext)_localctx)._branch);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115; Match(ESAC);
				}
				break;
			case 6:
				{
				_localctx = new NewTypeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117; Match(NEW);
				State = 118; ((NewTypeExprContext)_localctx).type = Match(TYPE);
				}
				break;
			case 7:
				{
				_localctx = new IdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119; ((IdExprContext)_localctx).id = Match(ID);
				}
				break;
			case 8:
				{
				_localctx = new IntegerExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; ((IntegerExprContext)_localctx).integer = Match(INTEGER);
				}
				break;
			case 9:
				{
				_localctx = new StringExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; ((StringExprContext)_localctx).@string = Match(STRING);
				}
				break;
			case 10:
				{
				_localctx = new BoolExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122;
				((BoolExprContext)_localctx).@bool = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
					((BoolExprContext)_localctx).@bool = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				{
				_localctx = new InParenthesisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123; Match(PARENT_AB);
				State = 124; ((InParenthesisExprContext)_localctx).expresion = expr(0);
				State = 125; Match(PARENT_CE);
				}
				break;
			case 12:
				{
				_localctx = new SelfDispatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; ((SelfDispatchContext)_localctx).id = Match(ID);
				State = 128; Match(PARENT_AB);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LLAVE_AB) | (1L << PARENT_AB) | (1L << OP_NEG) | (1L << IF) | (1L << WHILE) | (1L << LET) | (1L << CASE) | (1L << TRUE) | (1L << FALSE) | (1L << ISVOID) | (1L << NEW) | (1L << NOT) | (1L << INTEGER) | (1L << ID) | (1L << STRING))) != 0)) {
					{
					State = 129; ((SelfDispatchContext)_localctx)._expr = expr(0);
					((SelfDispatchContext)_localctx)._expresions.Add(((SelfDispatchContext)_localctx)._expr);
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMA) {
						{
						{
						State = 130; Match(COMA);
						State = 131; ((SelfDispatchContext)_localctx)._expr = expr(0);
						((SelfDispatchContext)_localctx)._expresions.Add(((SelfDispatchContext)_localctx)._expr);
						}
						}
						State = 136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 139; Match(PARENT_CE);
				}
				break;
			case 13:
				{
				_localctx = new NegExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140; Match(OP_NEG);
				State = 141; ((NegExprContext)_localctx).expresion = expr(7);
				}
				break;
			case 14:
				{
				_localctx = new IsvoidExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142; Match(ISVOID);
				State = 143; ((IsvoidExprContext)_localctx).expresion = expr(6);
				}
				break;
			case 15:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144; Match(NOT);
				State = 145; ((NotExprContext)_localctx).expresion = expr(2);
				}
				break;
			case 16:
				{
				_localctx = new AssignExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146; ((AssignExprContext)_localctx).id = Match(ID);
				State = 147; Match(OP_ASSIGN);
				State = 148; ((AssignExprContext)_localctx).expresion = expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 179;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ArithContext(new ExprContext(_parentctx, _parentState));
						((ArithContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 152;
						((ArithContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_MULT || _la==OP_DIV) ) {
							((ArithContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 153; ((ArithContext)_localctx).right = expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ArithContext(new ExprContext(_parentctx, _parentState));
						((ArithContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 154;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 155;
						((ArithContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
							((ArithContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 156; ((ArithContext)_localctx).right = expr(5);
						}
						break;
					case 3:
						{
						_localctx = new CompaExprContext(new ExprContext(_parentctx, _parentState));
						((CompaExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 157;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 158;
						((CompaExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_EQUAL) | (1L << OP_MINOR) | (1L << OP_MINOR_EQUAL))) != 0)) ) {
							((CompaExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 159; ((CompaExprContext)_localctx).right = expr(4);
						}
						break;
					case 4:
						{
						_localctx = new DispatchContext(new ExprContext(_parentctx, _parentState));
						((DispatchContext)_localctx).expresion = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 160;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 163;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OP_CLASS) {
							{
							State = 161; Match(OP_CLASS);
							State = 162; ((DispatchContext)_localctx).type = Match(TYPE);
							}
						}

						State = 165; Match(POINT);
						State = 166; ((DispatchContext)_localctx).id = Match(ID);
						State = 167; Match(PARENT_AB);
						State = 176;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LLAVE_AB) | (1L << PARENT_AB) | (1L << OP_NEG) | (1L << IF) | (1L << WHILE) | (1L << LET) | (1L << CASE) | (1L << TRUE) | (1L << FALSE) | (1L << ISVOID) | (1L << NEW) | (1L << NOT) | (1L << INTEGER) | (1L << ID) | (1L << STRING))) != 0)) {
							{
							State = 168; ((DispatchContext)_localctx)._expr = expr(0);
							((DispatchContext)_localctx)._expresions.Add(((DispatchContext)_localctx)._expr);
							State = 173;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMA) {
								{
								{
								State = 169; Match(COMA);
								State = 170; ((DispatchContext)_localctx)._expr = expr(0);
								((DispatchContext)_localctx)._expresions.Add(((DispatchContext)_localctx)._expr);
								}
								}
								State = 175;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 178; Match(PARENT_CE);
						}
						break;
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LetRuleContext : ParserRuleContext {
		public IType computedType;
		public LetRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letRule; } }
	 
		public LetRuleContext() { }
		public virtual void CopyFrom(LetRuleContext context) {
			base.CopyFrom(context);
			this.computedType = context.computedType;
		}
	}
	public partial class LetBodyContext : LetRuleContext {
		public DeclarationContext declaretion;
		public ExprContext body;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetBodyContext(LetRuleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterLetBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitLetBody(this);
		}
	}
	public partial class LetDeclContext : LetRuleContext {
		public DeclarationContext declaretion;
		public LetRuleContext let;
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LetRuleContext letRule() {
			return GetRuleContext<LetRuleContext>(0);
		}
		public LetDeclContext(LetRuleContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterLetDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitLetDecl(this);
		}
	}

	[RuleVersion(0)]
	public LetRuleContext letRule() {
		LetRuleContext _localctx = new LetRuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_letRule);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new LetDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; ((LetDeclContext)_localctx).declaretion = declaration();
				State = 185; Match(COMA);
				State = 186; ((LetDeclContext)_localctx).let = letRule();
				}
				break;
			case 2:
				_localctx = new LetBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; ((LetBodyContext)_localctx).declaretion = declaration();
				State = 189; Match(IN);
				State = 190; ((LetBodyContext)_localctx).body = expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public DeclarationContext _declaration;
		public IList<DeclarationContext> _declaretions = new List<DeclarationContext>();
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 12, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; _localctx._declaration = declaration();
			_localctx._declaretions.Add(_localctx._declaration);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 195; Match(COMA);
				State = 196; _localctx._declaration = declaration();
				_localctx._declaretions.Add(_localctx._declaration);
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public string idText;
		public string typeText;
		public IToken id;
		public IToken type;
		public ExprContext expression;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; _localctx.id = Match(ID);
			State = 203; Match(OP_TYPED);
			State = 204; _localctx.type = Match(TYPE);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 205; Match(OP_ASSIGN);
				State = 206; _localctx.expression = expr(0);
				}
			}

			_localctx.idText = (_localctx.id).Text; _localctx.typeText = (_localctx.type).Text;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BranchContext : ParserRuleContext {
		public string idText;
		public string typeText;
		public IType computedType;
		public IToken id;
		public IToken type;
		public ExprContext expression;
		public ITerminalNode ID() { return GetToken(COOLgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(COOLgrammarParser.TYPE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitBranch(this);
		}
	}

	[RuleVersion(0)]
	public BranchContext branch() {
		BranchContext _localctx = new BranchContext(Context, State);
		EnterRule(_localctx, 16, RULE_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; _localctx.id = Match(ID);
			State = 212; Match(OP_TYPED);
			State = 213; _localctx.type = Match(TYPE);
			State = 214; Match(OP_CASE);
			State = 215; _localctx.expression = expr(0);
			_localctx.idText = (_localctx.id).Text; _localctx.typeText = (_localctx.type).Text;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _expresions = new List<ExprContext>();
		public IList<ExprContext> _expressions = new List<ExprContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICOOLgrammarListener typedListener = listener as ICOOLgrammarListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LLAVE_AB) | (1L << PARENT_AB) | (1L << OP_NEG) | (1L << IF) | (1L << WHILE) | (1L << LET) | (1L << CASE) | (1L << TRUE) | (1L << FALSE) | (1L << ISVOID) | (1L << NEW) | (1L << NOT) | (1L << INTEGER) | (1L << ID) | (1L << STRING))) != 0)) {
				{
				State = 218; _localctx._expr = expr(0);
				_localctx._expresions.Add(_localctx._expr);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 219; Match(COMA);
					State = 220; _localctx._expr = expr(0);
					_localctx._expressions.Add(_localctx._expr);
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\xE7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x6', '\x2', '\x18', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x19', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '&', '\n', '\x3', '\f', '\x3', '\xE', '\x3', ')', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x33', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x36', '\v', '\x4', '\x5', '\x4', 
		'\x38', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'G', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x61', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x64', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'q', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 't', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x87', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x8A', '\v', '\x6', '\x5', '\x6', 
		'\x8C', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x98', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xA6', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\xAE', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xB1', '\v', '\x6', '\x5', 
		'\x6', '\xB3', '\n', '\x6', '\x3', '\x6', '\a', '\x6', '\xB6', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\xB9', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xC3', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\xC8', '\n', '\b', '\f', '\b', '\xE', '\b', '\xCB', 
		'\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xD2', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xE0', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xE3', '\v', '\v', '\x5', '\v', 
		'\xE5', '\n', '\v', '\x3', '\v', '\x2', '\x3', '\n', '\f', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x6', 
		'\x3', '\x2', '$', '%', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\xF', 
		'\x10', '\x3', '\x2', '\f', '\xE', '\x2', '\x101', '\x2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\b', 'H', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x97', '\x3', '\x2', '\x2', '\x2', '\f', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x10', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', '\x4', 
		'\x3', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\a', '\x2', '\x2', '\x3', '\x1C', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '&', '\x2', '\x2', '\x1E', 
		'!', '\a', ',', '\x2', '\x2', '\x1F', ' ', '\a', '\'', '\x2', '\x2', ' ', 
		'\"', '\a', ',', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', 
		'\x2', '#', '\'', '\a', '\a', '\x2', '\x2', '$', '&', '\x5', '\x6', '\x4', 
		'\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', 
		'\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', 
		'\x2', '\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\b', '\x2', '\x2', '+', ',', '\a', 
		'\x3', '\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '.', 
		'\a', '-', '\x2', '\x2', '.', '\x37', '\a', '\n', '\x2', '\x2', '/', '\x34', 
		'\x5', '\b', '\x5', '\x2', '\x30', '\x31', '\a', '\x4', '\x2', '\x2', 
		'\x31', '\x33', '\x5', '\b', '\x5', '\x2', '\x32', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '/', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\a', '\v', '\x2', '\x2', ':', ';', '\a', '\x15', '\x2', 
		'\x2', ';', '<', '\a', ',', '\x2', '\x2', '<', '=', '\a', '\a', '\x2', 
		'\x2', '=', '>', '\x5', '\n', '\x6', '\x2', '>', '?', '\a', '\b', '\x2', 
		'\x2', '?', '@', '\a', '\x3', '\x2', '\x2', '@', '\x41', '\b', '\x4', 
		'\x1', '\x2', '\x41', 'G', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\x10', '\t', '\x2', '\x43', '\x44', '\a', '\x3', '\x2', '\x2', 
		'\x44', '\x45', '\b', '\x4', '\x1', '\x2', '\x45', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '-', '\x3', '\x2', '\x2', '\x2', '\x46', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '-', '\x2', '\x2', 'I', 'J', '\a', '\x15', '\x2', '\x2', 'J', 
		'K', '\a', ',', '\x2', '\x2', 'K', 'L', '\b', '\x5', '\x1', '\x2', 'L', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\b', '\x6', '\x1', '\x2', 
		'N', 'O', '\a', '\x18', '\x2', '\x2', 'O', 'P', '\x5', '\n', '\x6', '\x2', 
		'P', 'Q', '\a', '\x19', '\x2', '\x2', 'Q', 'R', '\x5', '\n', '\x6', '\x2', 
		'R', 'S', '\a', '\x1A', '\x2', '\x2', 'S', 'T', '\x5', '\n', '\x6', '\x2', 
		'T', 'U', '\a', '\x1B', '\x2', '\x2', 'U', '\x98', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\x1C', '\x2', '\x2', 'W', 'X', '\x5', '\n', '\x6', 
		'\x2', 'X', 'Y', '\a', '\x1D', '\x2', '\x2', 'Y', 'Z', '\x5', '\n', '\x6', 
		'\x2', 'Z', '[', '\a', '\x1E', '\x2', '\x2', '[', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x62', '\a', '\a', '\x2', '\x2', ']', '^', '\x5', 
		'\n', '\x6', '\x2', '^', '_', '\a', '\x3', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\n', '\x6', '\x2', '\x66', 'g', '\a', '\x3', '\x2', '\x2', 
		'g', 'h', '\a', '\b', '\x2', '\x2', 'h', '\x98', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\a', '\x1F', '\x2', '\x2', 'j', '\x98', '\x5', '\f', 
		'\a', '\x2', 'k', 'l', '\a', '!', '\x2', '\x2', 'l', 'm', '\x5', '\n', 
		'\x6', '\x2', 'm', 'n', '\a', '\"', '\x2', '\x2', 'n', 'r', '\x5', '\x12', 
		'\n', '\x2', 'o', 'q', '\x5', '\x12', '\n', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '#', 
		'\x2', '\x2', 'v', '\x98', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', 
		')', '\x2', '\x2', 'x', '\x98', '\a', ',', '\x2', '\x2', 'y', '\x98', 
		'\a', '-', '\x2', '\x2', 'z', '\x98', '\a', '+', '\x2', '\x2', '{', '\x98', 
		'\a', '.', '\x2', '\x2', '|', '\x98', '\t', '\x2', '\x2', '\x2', '}', 
		'~', '\a', '\n', '\x2', '\x2', '~', '\x7F', '\x5', '\n', '\x6', '\x2', 
		'\x7F', '\x80', '\a', '\v', '\x2', '\x2', '\x80', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\a', '-', '\x2', '\x2', '\x82', '\x8B', 
		'\a', '\n', '\x2', '\x2', '\x83', '\x88', '\x5', '\n', '\x6', '\x2', '\x84', 
		'\x85', '\a', '\x4', '\x2', '\x2', '\x85', '\x87', '\x5', '\n', '\x6', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x98', '\a', '\v', '\x2', 
		'\x2', '\x8E', '\x8F', '\a', '\x13', '\x2', '\x2', '\x8F', '\x98', '\x5', 
		'\n', '\x6', '\t', '\x90', '\x91', '\a', '(', '\x2', '\x2', '\x91', '\x98', 
		'\x5', '\n', '\x6', '\b', '\x92', '\x93', '\a', '*', '\x2', '\x2', '\x93', 
		'\x98', '\x5', '\n', '\x6', '\x4', '\x94', '\x95', '\a', '-', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\x14', '\x2', '\x2', '\x96', '\x98', '\x5', '\n', 
		'\x6', '\x3', '\x97', 'M', '\x3', '\x2', '\x2', '\x2', '\x97', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\\', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x97', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x97', 'w', '\x3', '\x2', '\x2', '\x2', '\x97', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x97', 'z', '\x3', '\x2', '\x2', '\x2', '\x97', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '|', '\x3', '\x2', '\x2', '\x2', '\x97', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x81', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x97', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x92', '\x3', '\x2', '\x2', '\x2', '\x97', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\f', '\a', '\x2', '\x2', '\x9A', '\x9B', '\t', '\x3', '\x2', 
		'\x2', '\x9B', '\xB6', '\x5', '\n', '\x6', '\b', '\x9C', '\x9D', '\f', 
		'\x6', '\x2', '\x2', '\x9D', '\x9E', '\t', '\x4', '\x2', '\x2', '\x9E', 
		'\xB6', '\x5', '\n', '\x6', '\a', '\x9F', '\xA0', '\f', '\x5', '\x2', 
		'\x2', '\xA0', '\xA1', '\t', '\x5', '\x2', '\x2', '\xA1', '\xB6', '\x5', 
		'\n', '\x6', '\x6', '\xA2', '\xA5', '\f', '\n', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\x17', '\x2', '\x2', '\xA4', '\xA6', '\a', ',', '\x2', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\t', '\x2', '\x2', '\xA8', '\xA9', '\a', '-', '\x2', '\x2', 
		'\xA9', '\xB2', '\a', '\n', '\x2', '\x2', '\xAA', '\xAF', '\x5', '\n', 
		'\x6', '\x2', '\xAB', '\xAC', '\a', '\x4', '\x2', '\x2', '\xAC', '\xAE', 
		'\x5', '\n', '\x6', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', 
		'\a', '\v', '\x2', '\x2', '\xB5', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', 
		'\x5', '\x10', '\t', '\x2', '\xBB', '\xBC', '\a', '\x4', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', '\f', '\a', '\x2', '\xBD', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\x5', '\x10', '\t', '\x2', '\xBF', '\xC0', 
		'\a', ' ', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\n', '\x6', '\x2', '\xC1', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC3', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC9', '\x5', '\x10', '\t', '\x2', '\xC5', 
		'\xC6', '\a', '\x4', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x10', '\t', 
		'\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'-', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x15', '\x2', '\x2', '\xCE', 
		'\xD1', '\a', ',', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x14', '\x2', 
		'\x2', '\xD0', '\xD2', '\x5', '\n', '\x6', '\x2', '\xD1', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\b', '\t', '\x1', 
		'\x2', '\xD4', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'-', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x15', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', ',', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x16', '\x2', 
		'\x2', '\xD9', '\xDA', '\x5', '\n', '\x6', '\x2', '\xDA', '\xDB', '\b', 
		'\n', '\x1', '\x2', '\xDB', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xE1', '\x5', '\n', '\x6', '\x2', '\xDD', '\xDE', '\a', '\x4', '\x2', 
		'\x2', '\xDE', '\xE0', '\x5', '\n', '\x6', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x19', '!', '\'', '\x34', '\x37', '\x46', '\x62', 'r', 
		'\x88', '\x8B', '\x97', '\xA5', '\xAF', '\xB2', '\xB5', '\xB7', '\xC2', 
		'\xC9', '\xD1', '\xE1', '\xE4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
