.data
heap: .space 2000000
heapPointer: .word 0
newLine: .asciiz "\n"
s0: .asciiz ""
s1: .asciiz "caca"
s2: .asciiz "caca"
type_Object:
	type_Object_Length: .byte 0
	type_Object$Init: .word Object$Init
	type_Object$abort: .word Object$abort
	type_Object$type_name: .word Object$type_name
	type_Object$copy: .word Object$copy
	type_Object_count_methods: .word 4
	type_Object_parent: .word 0
	type_Object_name: .asciiz "Object"
type_void:
	type_void_Length: .byte 0
	type_void$Init: .word void$Init
	type_void_count_methods: .word 1
	type_void_parent: .word 0
	type_void_name: .asciiz "void"
type_IO:
	type_IO_Length: .byte 0
	type_IO$Init: .word IO$Init
	type_IO$abort: .word Object$abort
	type_IO$type_name: .word Object$type_name
	type_IO$copy: .word Object$copy
	type_IO$out_string: .word IO$out_string
	type_IO$out_int: .word IO$out_int
	type_IO$in_string: .word IO$in_string
	type_IO$in_int: .word IO$in_int
	type_IO_count_methods: .word 8
	type_IO_parent: .word type_Object_parent
	type_IO_name: .asciiz "IO"
type_String:
	type_String_Length: .byte 4
	type_String$Init: .word String$Init
	type_String$abort: .word Object$abort
	type_String$type_name: .word Object$type_name
	type_String$copy: .word Object$copy
	type_String$concat: .word String$concat
	type_String$lenght: .word String$lenght
	type_String$substr: .word String$substr
	type_String_count_methods: .word 7
	type_String_parent: .word type_Object_parent
	type_String_name: .asciiz "String"
type_Bool:
	type_Bool_Length: .byte 4
	type_Bool$Init: .word Bool$Init
	type_Bool$abort: .word Object$abort
	type_Bool$type_name: .word Object$type_name
	type_Bool$copy: .word Object$copy
	type_Bool_count_methods: .word 4
	type_Bool_parent: .word type_Object_parent
	type_Bool_name: .asciiz "Bool"
type_Int:
	type_Int_Length: .byte 4
	type_Int$Init: .word Int$Init
	type_Int$abort: .word Object$abort
	type_Int$type_name: .word Object$type_name
	type_Int$copy: .word Object$copy
	type_Int_count_methods: .word 4
	type_Int_parent: .word type_Object_parent
	type_Int_name: .asciiz "Int"
type_Main:
	type_Main_Length: .byte 0
	type_Main$Init: .word Main$Init
	type_Main$abort: .word Object$abort
	type_Main$type_name: .word Object$type_name
	type_Main$copy: .word Object$copy
	type_Main$main: .word Main$main
	type_Main_count_methods: .word 5
	type_Main_parent: .word type_Object_parent
	type_Main_name: .asciiz "Main"
type_A:
	type_A_Length: .byte 0
	type_A$Init: .word A$Init
	type_A$abort: .word Object$abort
	type_A$type_name: .word Object$type_name
	type_A$copy: .word Object$copy
	type_A$sum: .word A$sum
	type_A_count_methods: .word 5
	type_A_parent: .word type_Object_parent
	type_A_name: .asciiz "A"
type_X:
	type_X_Length: .byte 4
	type_X$Init: .word X$Init
	type_X$abort: .word Object$abort
	type_X$type_name: .word Object$type_name
	type_X$copy: .word Object$copy
	type_X$sum: .word X$sum
	type_X$algo: .word X$algo
	type_X_count_methods: .word 6
	type_X_parent: .word type_A_parent
	type_X_name: .asciiz "X"
type_B:
	type_B_Length: .byte 8
	type_B$Init: .word B$Init
	type_B$abort: .word Object$abort
	type_B$type_name: .word Object$type_name
	type_B$copy: .word Object$copy
	type_B$sum: .word B$sum
	type_B_count_methods: .word 5
	type_B_parent: .word type_A_parent
	type_B_name: .asciiz "B"
type_D:
	type_D_Length: .byte 8
	type_D$Init: .word D$Init
	type_D$abort: .word Object$abort
	type_D$type_name: .word Object$type_name
	type_D$copy: .word Object$copy
	type_D$sum: .word B$sum
	type_D$f: .word D$f
	type_D_count_methods: .word 6
	type_D_parent: .word type_B_parent
	type_D_name: .asciiz "D"
.text
##-----functions-----


entry:
sub $sp, $sp, 20
sw $ra, 16($sp)
li $t0, 0
sw $t0, 12($sp)		##_value0
sw $t0, 8($sp)		##_Type1
sw $t0, 4($sp)		##_value2
sw $t0, 0($sp)		##_value3
jal Main$Init		##_value0=CALL Main$Init
sw $v0, 12($sp)
lw $t0, 12($sp)		##_Type1= TYPEOF _value0
sw $t0, 8($sp)
lw $t0, 8($sp)		##_value2=VCALL _Type1 Main$main
lw $t0, ($t0)
add $t0,$t0,-8
lw $t1, ($t0)
mul $t1,$t1,-4
add $t0, $t0, $t1
add $t0,$t0,16
lw $t0,($t0)
jalr $t0
sw $v0, 4($sp)
la $t0, heap		##_value3=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value3 Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $ra, 16($sp)		##return _value3
lw $v0, 0($sp)
addi $sp, $sp 20
li $v0, 10
syscall


Object$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE Object
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Object_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 0
sw $t2, ($t0)
addi $t1, $t1, 8
sw $t1, heapPointer
sw $v0, 0($sp)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


void$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE void
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_void_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 0
sw $t2, ($t0)
addi $t1, $t1, 8
sw $t1, heapPointer
sw $v0, 0($sp)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


IO$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE IO
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_IO_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 0
sw $t2, ($t0)
addi $t1, $t1, 8
sw $t1, heapPointer
sw $v0, 0($sp)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


String$Init:
sub $sp, $sp, 12
sw $ra, 8($sp)
li $t0, 0
sw $t0, 4($sp)		##self
sw $t0, 0($sp)		##_value1
la $t0, heap		##self=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 4($sp)
la $t0, s0		##_value1= LOAD s0
sw $t0, 0($sp)
lw $t0, 4($sp)		##SETATTR self String$x _value1
addi $t0, $t0, 8
lw $t1, 0($sp)
sw $t1, ($t0)
lw $ra, 8($sp)		##return self
lw $v0, 4($sp)
addi $sp, $sp 12
jr $ra


Bool$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE Bool
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Bool_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR self Bool$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


Int$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR self Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


Main$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE Main
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Main_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 0
sw $t2, ($t0)
addi $t1, $t1, 8
sw $t1, heapPointer
sw $v0, 0($sp)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


A$Init:
sub $sp, $sp, 8
sw $ra, 4($sp)
li $t0, 0
sw $t0, 0($sp)		##self
la $t0, heap		##self=ALLOCATE A
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_A_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 0
sw $t2, ($t0)
addi $t1, $t1, 8
sw $t1, heapPointer
sw $v0, 0($sp)
lw $ra, 4($sp)		##return self
lw $v0, 0($sp)
addi $sp, $sp 8
jr $ra


X$Init:
sub $sp, $sp, 12
sw $ra, 8($sp)
li $t0, 0
sw $t0, 4($sp)		##self
sw $t0, 0($sp)		##_value1
la $t0, heap		##self=ALLOCATE X
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_X_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 4($sp)
la $t0, heap		##_value1=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value1 Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $t0, 4($sp)		##SETATTR self X$a _value1
addi $t0, $t0, 8
lw $t1, 0($sp)
sw $t1, ($t0)
lw $ra, 8($sp)		##return self
lw $v0, 4($sp)
addi $sp, $sp 12
jr $ra


B$Init:
sub $sp, $sp, 48
sw $ra, 44($sp)
li $t0, 0
sw $t0, 40($sp)		##self
sw $t0, 36($sp)		##_value1
sw $t0, 32($sp)		##_value2
sw $t0, 28($sp)		##_value3
sw $t0, 24($sp)		##_value4
sw $t0, 20($sp)		##_valueNum5
sw $t0, 16($sp)		##_value6
sw $t0, 12($sp)		##_value7
sw $t0, 8($sp)		##_value8
sw $t0, 4($sp)		##_value9
sw $t0, 0($sp)		##_value10
la $t0, heap		##self=ALLOCATE B
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_B_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 2
sw $t2, ($t0)
addi $t1, $t1, 16
sw $t1, heapPointer
sw $v0, 40($sp)
la $t0, s1		##_value1= LOAD s1
sw $t0, 36($sp)
la $t0, heap		##_value2=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 32($sp)
lw $t0, 32($sp)		##SETATTR _value2 String$x _value1
addi $t0, $t0, 8
lw $t1, 36($sp)
sw $t1, ($t0)
lw $t0, 40($sp)		##SETATTR self B$b _value2
addi $t0, $t0, 8
lw $t1, 32($sp)
sw $t1, ($t0)
la $t0, heap		##_value3=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 28($sp)
lw $t0, 28($sp)		##SETATTR _value3 Int$x 2
addi $t0, $t0, 8
li $t1, 2
sw $t1, ($t0)
la $t0, heap		##_value4=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 24($sp)
lw $t0, 24($sp)		##SETATTR _value4 Int$x 3
addi $t0, $t0, 8
li $t1, 3
sw $t1, ($t0)
la $t0, heap		##_value6=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 16($sp)
lw $t0, 16($sp)		##SETATTR _value6 Int$x 7
addi $t0, $t0, 8
li $t1, 7
sw $t1, ($t0)
la $t0, heap		##_value7=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 12($sp)
lw $t0, 12($sp)		##SETATTR _value7 Int$x 3
addi $t0, $t0, 8
li $t1, 3
sw $t1, ($t0)
lw $t0, 16($sp)		##_value8=GETATTR _value6 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 12($sp)		##_value9=GETATTR _value7 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t1, 8($sp)		##_valueNum5=_value8+_value9
lw $t2, 4($sp)
add $t0, $t1, $t2
sw $t0, 20($sp)
la $t0, heap		##_value10=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value10 Int$x _valueNum5
addi $t0, $t0, 8
lw $t1, 20($sp)
sw $t1, ($t0)
lw $t0, 40($sp)		##SETATTR self B$c _value10
addi $t0, $t0, 12
lw $t1, 0($sp)
sw $t1, ($t0)
lw $ra, 44($sp)		##return self
lw $v0, 40($sp)
addi $sp, $sp 48
jr $ra


D$Init:
sub $sp, $sp, 48
sw $ra, 44($sp)
li $t0, 0
sw $t0, 40($sp)		##self
sw $t0, 36($sp)		##_value1
sw $t0, 32($sp)		##_value2
sw $t0, 28($sp)		##_value3
sw $t0, 24($sp)		##_value4
sw $t0, 20($sp)		##_valueNum5
sw $t0, 16($sp)		##_value6
sw $t0, 12($sp)		##_value7
sw $t0, 8($sp)		##_value8
sw $t0, 4($sp)		##_value9
sw $t0, 0($sp)		##_value10
la $t0, heap		##self=ALLOCATE D
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_D_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 2
sw $t2, ($t0)
addi $t1, $t1, 16
sw $t1, heapPointer
sw $v0, 40($sp)
la $t0, s2		##_value1= LOAD s2
sw $t0, 36($sp)
la $t0, heap		##_value2=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 32($sp)
lw $t0, 32($sp)		##SETATTR _value2 String$x _value1
addi $t0, $t0, 8
lw $t1, 36($sp)
sw $t1, ($t0)
lw $t0, 40($sp)		##SETATTR self B$b _value2
addi $t0, $t0, 8
lw $t1, 32($sp)
sw $t1, ($t0)
la $t0, heap		##_value3=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 28($sp)
lw $t0, 28($sp)		##SETATTR _value3 Int$x 2
addi $t0, $t0, 8
li $t1, 2
sw $t1, ($t0)
la $t0, heap		##_value4=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 24($sp)
lw $t0, 24($sp)		##SETATTR _value4 Int$x 3
addi $t0, $t0, 8
li $t1, 3
sw $t1, ($t0)
la $t0, heap		##_value6=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 16($sp)
lw $t0, 16($sp)		##SETATTR _value6 Int$x 7
addi $t0, $t0, 8
li $t1, 7
sw $t1, ($t0)
la $t0, heap		##_value7=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 12($sp)
lw $t0, 12($sp)		##SETATTR _value7 Int$x 3
addi $t0, $t0, 8
li $t1, 3
sw $t1, ($t0)
lw $t0, 16($sp)		##_value8=GETATTR _value6 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 12($sp)		##_value9=GETATTR _value7 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t1, 8($sp)		##_valueNum5=_value8+_value9
lw $t2, 4($sp)
add $t0, $t1, $t2
sw $t0, 20($sp)
la $t0, heap		##_value10=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value10 Int$x _valueNum5
addi $t0, $t0, 8
lw $t1, 20($sp)
sw $t1, ($t0)
lw $t0, 40($sp)		##SETATTR self B$c _value10
addi $t0, $t0, 12
lw $t1, 0($sp)
sw $t1, ($t0)
lw $ra, 44($sp)		##return self
lw $v0, 40($sp)
addi $sp, $sp 48
jr $ra


Object$abort:
sub $sp, $sp, 8
sw $ra, 4($sp)
##		0($sp)	self
li $t0, 0
eret		##halt
lw $ra, 4($sp)		##return
li $v0, 0
addi $sp, $sp 8
jr $ra


Object$type_name:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
li $t0, 0
sw $t0, 4($sp)		##x
sw $t0, 0($sp)		##_value1
lw $t0, 8($sp)		##x= type_name self
lw $t0, ($t0)
sw $t0, 4($sp)
la $t0, heap		##_value1=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value1 String$x x
addi $t0, $t0, 8
lw $t1, 4($sp)
sw $t1, ($t0)
lw $ra, 12($sp)		##return _value1
lw $v0, 0($sp)
addi $sp, $sp 16
jr $ra


Object$copy:
sub $sp, $sp, 12
sw $ra, 8($sp)
##		4($sp)	self
li $t0, 0
sw $t0, 0($sp)		##x
lw $t0, 4($sp)		##x= copy self
la $t1, heap
lw $t2, heapPointer
add $t1, $t1, $t2
move $v0, $t1
lw $t2, ($t1)
sw $t2, ($t0)
add $t0,$t0,4
add $t1,$t1,4
lw $t2, ($t1)
sw $t2, ($t0)
move $t3, $t2
loopCopy:
beqz $t3,endCopy
add $t0,$t0,4
add $t1,$t1,4
lw $t2, ($t1)
sw $t2, ($t0)
sub $t3, $t3, 1
j loopCopy
endCopy: 
sw $v0, 0($sp)
lw $ra, 8($sp)		##return x
lw $v0, 0($sp)
addi $sp, $sp 12
jr $ra


IO$out_string:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
##		4($sp)	x
li $t0, 0
sw $t0, 0($sp)		##_value0
lw $t0, 4($sp)		##_value0=GETATTR x String$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 0($sp)
lw $a0, 0($sp)		##out_str _value0
li $v0, 4
syscall
la $a0, newLine
li $v0, 4
syscall
lw $ra, 12($sp)		##return self
lw $v0, 8($sp)
addi $sp, $sp 16
jr $ra


IO$out_int:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
##		4($sp)	x
li $t0, 0
sw $t0, 0($sp)		##_value0
lw $t0, 4($sp)		##_value0=GETATTR x Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 0($sp)
lw $a0, 0($sp)		##out_int _value0
li $v0, 1
syscall
la $a0, newLine
li $v0, 4
syscall
lw $ra, 12($sp)		##return self
lw $v0, 8($sp)
addi $sp, $sp 16
jr $ra


IO$in_string:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
li $t0, 0
sw $t0, 4($sp)		##x
sw $t0, 0($sp)		##_value1
li $v0, 8		##x=in_str
la $a0, heap
lw $t0, heapPointer
add $a0, $a0, $t0
li $a1, 1025
syscall
rnw:
lb $t1, heap($t0)
beq $t1,10,endrnw
beqz $t1,endrnw
add $t0, $t0, 1
j rnw
endrnw:
sb $zero, heap($t0)
add $t0, $t0, 1
sw $t0, heapPointer
sw $a0, 4($sp)
la $t0, heap		##_value1=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value1 String$x x
addi $t0, $t0, 8
lw $t1, 4($sp)
sw $t1, ($t0)
lw $ra, 12($sp)		##return _value1
lw $v0, 0($sp)
addi $sp, $sp 16
jr $ra


IO$in_int:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
li $t0, 0
sw $t0, 4($sp)		##x
sw $t0, 0($sp)		##_value1
li $v0, 5		##x=in_int
syscall
sw $v0, 4($sp)
la $t0, heap		##_value1=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value1 Int$x x
addi $t0, $t0, 8
lw $t1, 4($sp)
sw $t1, ($t0)
lw $ra, 12($sp)		##return _value1
lw $v0, 0($sp)
addi $sp, $sp 16
jr $ra


String$concat:
sub $sp, $sp, 28
sw $ra, 24($sp)
##		20($sp)	self
##		16($sp)	x
li $t0, 0
sw $t0, 12($sp)		##value
sw $t0, 8($sp)		##_value1
sw $t0, 4($sp)		##_value2
sw $t0, 0($sp)		##_value3
lw $t0, 20($sp)		##_value1=GETATTR self String$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 16($sp)		##_value2=GETATTR x String$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t0, 8($sp)		##value = CONCAT _value1 _value2
lw $t1, 4($sp)
jal concatFunctionStart
sw $v0, 12($sp)
la $t0, heap		##_value3=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value3 String$x value
addi $t0, $t0, 8
lw $t1, 12($sp)
sw $t1, ($t0)
lw $ra, 24($sp)		##return _value3
lw $v0, 0($sp)
addi $sp, $sp 28
jr $ra


String$lenght:
sub $sp, $sp, 20
sw $ra, 16($sp)
##		12($sp)	self
li $t0, 0
sw $t0, 8($sp)		##value
sw $t0, 4($sp)		##_value1
sw $t0, 0($sp)		##_value2
lw $t0, 12($sp)		##_value1=GETATTR self String$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t0, 4($sp)		##value = LENGHT _value1
jal lengthFunctionStart
sw $v0, 8($sp)
la $t0, heap		##_value2=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value2 Int$x value
addi $t0, $t0, 8
lw $t1, 8($sp)
sw $t1, ($t0)
lw $ra, 16($sp)		##return _value2
lw $v0, 0($sp)
addi $sp, $sp 20
jr $ra


String$substr:
sub $sp, $sp, 36
sw $ra, 32($sp)
##		28($sp)	self
##		24($sp)	i
##		20($sp)	l
li $t0, 0
sw $t0, 16($sp)		##value
sw $t0, 12($sp)		##_value1
sw $t0, 8($sp)		##_value2
sw $t0, 4($sp)		##_value3
sw $t0, 0($sp)		##_value4
lw $t0, 28($sp)		##_value1=GETATTR self String$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 12($sp)
lw $t0, 24($sp)		##_value2=GETATTR i Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 20($sp)		##_value3=GETATTR l Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t0, 12($sp)		##value = SUBSTRING _value1 _value2 _value3
lw $t1, 8($sp)
lw $t2, 4($sp)
jal substrFunctionStart
sw $v0, 16($sp)
la $t0, heap		##_value4=ALLOCATE String
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_String_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value4 String$x value
addi $t0, $t0, 8
lw $t1, 16($sp)
sw $t1, ($t0)
lw $ra, 32($sp)		##return _value4
lw $v0, 0($sp)
addi $sp, $sp 36
jr $ra


Main$main:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
li $t0, 0
sw $t0, 4($sp)		##_value0
sw $t0, 0($sp)		##_value1
la $t0, heap		##_value0=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 4($sp)
lw $t0, 4($sp)		##SETATTR _value0 Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
la $t0, heap		##_value1=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value1 Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $ra, 12($sp)		##return _value1
lw $v0, 0($sp)
addi $sp, $sp 16
jr $ra


A$sum:
sub $sp, $sp, 52
sw $ra, 48($sp)
##		44($sp)	self
##		40($sp)	p1
##		36($sp)	p2
li $t0, 0
sw $t0, 32($sp)		##_valueNum0
sw $t0, 28($sp)		##_valueNum1
sw $t0, 24($sp)		##_value2
sw $t0, 20($sp)		##_value3
sw $t0, 16($sp)		##_value4
sw $t0, 12($sp)		##_value5
sw $t0, 8($sp)		##_value6
sw $t0, 4($sp)		##_value7
sw $t0, 0($sp)		##_value8
lw $t0, 40($sp)		##_value2=GETATTR p1 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 24($sp)
lw $t0, 36($sp)		##_value3=GETATTR p2 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 20($sp)
lw $t1, 24($sp)		##_valueNum1=_value2+_value3
lw $t2, 20($sp)
add $t0, $t1, $t2
sw $t0, 28($sp)
la $t0, heap		##_value4=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 16($sp)
lw $t0, 16($sp)		##SETATTR _value4 Int$x _valueNum1
addi $t0, $t0, 8
lw $t1, 28($sp)
sw $t1, ($t0)
la $t0, heap		##_value5=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 12($sp)
lw $t0, 12($sp)		##SETATTR _value5 Int$x 1
addi $t0, $t0, 8
li $t1, 1
sw $t1, ($t0)
lw $t0, 16($sp)		##_value6=GETATTR _value4 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 12($sp)		##_value7=GETATTR _value5 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t1, 8($sp)		##_valueNum0=_value6+_value7
lw $t2, 4($sp)
add $t0, $t1, $t2
sw $t0, 32($sp)
la $t0, heap		##_value8=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value8 Int$x _valueNum0
addi $t0, $t0, 8
lw $t1, 32($sp)
sw $t1, ($t0)
lw $ra, 48($sp)		##return _value8
lw $v0, 0($sp)
addi $sp, $sp 52
jr $ra


X$algo:
sub $sp, $sp, 24
sw $ra, 20($sp)
##		16($sp)	self
li $t0, 0
sw $t0, 12($sp)		##_value0
sw $t0, 8($sp)		##_value1
sw $t0, 4($sp)		##_Type4
sw $t0, 0($sp)		##_value3
la $t0, heap		##_value0=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 12($sp)
lw $t0, 12($sp)		##SETATTR _value0 Int$x 1
addi $t0, $t0, 8
li $t1, 1
sw $t1, ($t0)
la $t0, heap		##_value1=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 8($sp)
lw $t0, 8($sp)		##SETATTR _value1 Int$x 2
addi $t0, $t0, 8
li $t1, 2
sw $t1, ($t0)
lw $t0, 16($sp)		##_Type4= TYPEOF self
sw $t0, 4($sp)
lw $t0, 16($sp)		##arg self
sw $t0, -8($sp)
lw $t0, 12($sp)		##arg _value0
sw $t0, -12($sp)
lw $t0, 8($sp)		##arg _value1
sw $t0, -16($sp)
lw $t0, 4($sp)		##_value3=VCALL _Type4 A$sum
lw $t0, ($t0)
add $t0,$t0,-8
lw $t1, ($t0)
mul $t1,$t1,-4
add $t0, $t0, $t1
add $t0,$t0,16
lw $t0,($t0)
jalr $t0
sw $v0, 0($sp)
lw $ra, 20($sp)		##return _value3
lw $v0, 0($sp)
addi $sp, $sp 24
jr $ra


X$sum:
sub $sp, $sp, 52
sw $ra, 48($sp)
##		44($sp)	self
##		40($sp)	p1
##		36($sp)	p2
li $t0, 0
sw $t0, 32($sp)		##_valueNum0
sw $t0, 28($sp)		##_valueNum1
sw $t0, 24($sp)		##_value2
sw $t0, 20($sp)		##_value3
sw $t0, 16($sp)		##_value4
sw $t0, 12($sp)		##_value5
sw $t0, 8($sp)		##_value6
sw $t0, 4($sp)		##_value7
sw $t0, 0($sp)		##_value8
lw $t0, 40($sp)		##_value2=GETATTR p1 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 24($sp)
lw $t0, 36($sp)		##_value3=GETATTR p2 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 20($sp)
lw $t1, 24($sp)		##_valueNum1=_value2+_value3
lw $t2, 20($sp)
add $t0, $t1, $t2
sw $t0, 28($sp)
la $t0, heap		##_value4=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 16($sp)
lw $t0, 16($sp)		##SETATTR _value4 Int$x _valueNum1
addi $t0, $t0, 8
lw $t1, 28($sp)
sw $t1, ($t0)
la $t0, heap		##_value5=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 12($sp)
lw $t0, 12($sp)		##SETATTR _value5 Int$x 1
addi $t0, $t0, 8
li $t1, 1
sw $t1, ($t0)
lw $t0, 16($sp)		##_value6=GETATTR _value4 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 12($sp)		##_value7=GETATTR _value5 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t1, 8($sp)		##_valueNum0=_value6+_value7
lw $t2, 4($sp)
add $t0, $t1, $t2
sw $t0, 32($sp)
la $t0, heap		##_value8=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value8 Int$x _valueNum0
addi $t0, $t0, 8
lw $t1, 32($sp)
sw $t1, ($t0)
lw $ra, 48($sp)		##return _value8
lw $v0, 0($sp)
addi $sp, $sp 52
jr $ra


B$sum:
sub $sp, $sp, 32
sw $ra, 28($sp)
##		24($sp)	self
##		20($sp)	p1
##		16($sp)	p2
li $t0, 0
sw $t0, 12($sp)		##_valueNum0
sw $t0, 8($sp)		##_value1
sw $t0, 4($sp)		##_value2
sw $t0, 0($sp)		##_value3
lw $t0, 20($sp)		##_value1=GETATTR p1 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 8($sp)
lw $t0, 16($sp)		##_value2=GETATTR p2 Int$x
addi $t0, $t0, 8
lw $t0, ($t0)
sw $t0, 4($sp)
lw $t1, 8($sp)		##_valueNum0=_value1+_value2
lw $t2, 4($sp)
add $t0, $t1, $t2
sw $t0, 12($sp)
la $t0, heap		##_value3=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value3 Int$x _valueNum0
addi $t0, $t0, 8
lw $t1, 12($sp)
sw $t1, ($t0)
lw $ra, 28($sp)		##return _value3
lw $v0, 0($sp)
addi $sp, $sp 32
jr $ra


D$f:
sub $sp, $sp, 16
sw $ra, 12($sp)
##		8($sp)	self
##		4($sp)	a
li $t0, 0
sw $t0, 0($sp)		##_value0
la $t0, heap		##_value0=ALLOCATE Int
lw $t1, heapPointer
add $t0, $t0, $t1
move $v0, $t0
la $t2, type_Int_name
sw $t2, ($t0)
add $t0, $t0, 4
li $t2, 1
sw $t2, ($t0)
addi $t1, $t1, 12
sw $t1, heapPointer
sw $v0, 0($sp)
lw $t0, 0($sp)		##SETATTR _value0 Int$x 0
addi $t0, $t0, 8
li $t1, 0
sw $t1, ($t0)
lw $ra, 12($sp)		##return _value0
lw $v0, 0($sp)
addi $sp, $sp 16
jr $ra


equalFunctionStart:
beqz $a0, equalCheckZero
bnez $a1, loop_StrComp
li $v0, 0
jr $ra
loop_StrComp:
lb $t0, ($a0)
lb $t1, ($a1)
bne $t0,$t1, strComp_false
beqz $t0, strComp_true
addi $a0,$a0,1
addi $a1,$a1,1
j loop_StrComp
strComp_true:
li $v0, 1
jr $ra
strComp_false:
li $v0, 0
jr $ra
equalCheckZero:
seq $v0, $a1, 0
jr $ra


conformFunctionStart:
move $v1,$ra
ll_loop:
move $a2, $a1
addi $a1, $a1, 4
jal equalFunctionStart
move $a1, $a2
bnez  $v0, ll_true
lw $a1,($a1)
beqz $a1, ll_false
j ll_loop
ll_true:
li $v0, 0
jr $v1
ll_false:
li $v0, 1
jr $v1


lengthFunctionStart:
li $v0, 0
lengthLoad:
lb $t1, ($t0)
beqz $t1, lengthReturn
add $t0, $t0, 1
add $v0, $v0, 1
j lengthLoad
lengthReturn:
jr $ra


concatFunctionStart:
la $t3, heap
lw $t4, heapPointer
lw $t5, heapPointer
add $t4, $t4, $t3
move $v0, $t4
concatFunctionFirst:
lb $a0, ($t0)
beqz $a0, concatFunctionSecond
sb $a0, ($t4)
addi $t4, $t4, 1
addi $t5, $t5, 1
addi $t0, $t0, 1
j concatFunctionFirst
concatFunctionSecond:
lb $a0, ($t1)
beqz $a0, concatFunctionEnd
sb $a0, ($t4)
addi $t4, $t4, 1
addi $t5, $t5, 1
addi $t1, $t1, 1
j concatFunctionSecond
concatFunctionEnd:
sb $zero, ($t4)
addi $t5, $t5, 1
rem $t6, $t5, 4
neg $t6, $t6
add $t6, $t6, 4
add $t5, $t5, $t6
sb $t5, heapPointer
jr $ra
substrFunctionStart:
la $t3, heap
lw $t4, heapPointer
lw $t5, heapPointer
add $t4, $t4, $t3
move $v0, $t4
add $t0, $t0, $t1
move $v0, $t4
substrFunctionLoop:
lb $a0, 0($t0)
beqz $t2, substrFunctionFin  #llego al final del substr
addi $t2, $t2, -1
beqz $a0, substrFunctionFin 	# encontro el fin del str
sb $a0,  0($t4)
addi $t4, $t4, 1
addi $t5, $t5, 1
addi $t0, $t0, 1
j substrFunctionLoop
substrFunctionFin:
sb $zero, ($t4)
addi $t5, $t5, 1
rem $t6, $t5, 4
neg $t6, $t6
add $t6, $t6, 4
add $t5, $t5, $t6
sb $t5, heapPointer
# lw $ra, ($sp)
jr $ra
